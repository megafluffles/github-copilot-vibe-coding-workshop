openapi: 3.0.1
info:
  title: Simple Social Media Application API
  version: 1.0.0
  description: |
    API for a basic Social Networking Service (SNS) that allows users to create, retrieve, update, and delete posts; add comments; and like/unlike posts. Designed for educational and MVP use cases.
servers:
  - url: http://localhost:8080/api
paths:
  /posts:
    get:
      summary: List all posts
      description: Retrieve a list of all recent posts.
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new post
      description: Create a new post with username and content.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreateRequest'
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /posts/{postId}:
    get:
      summary: Get a single post
      description: Retrieve a specific post by ID.
      parameters:
        - $ref: '#/components/parameters/PostId'
      responses:
        '200':
          description: The requested post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update a post
      description: Update an existing post's content and username.
      parameters:
        - $ref: '#/components/parameters/PostId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdateRequest'
      responses:
        '200':
          description: Post updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a post
      description: Delete a post by ID.
      parameters:
        - $ref: '#/components/parameters/PostId'
      responses:
        '204':
          description: Post deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /posts/{postId}/comments:
    get:
      summary: List comments for a post
      description: Retrieve all comments for a specific post.
      parameters:
        - $ref: '#/components/parameters/PostId'
      responses:
        '200':
          description: A list of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a comment
      description: Add a comment to a post.
      parameters:
        - $ref: '#/components/parameters/PostId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateRequest'
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /posts/{postId}/comments/{commentId}:
    get:
      summary: Get a specific comment
      description: Retrieve a specific comment by ID for a post.
      parameters:
        - $ref: '#/components/parameters/PostId'
        - $ref: '#/components/parameters/CommentId'
      responses:
        '200':
          description: The requested comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update a comment
      description: Update an existing comment's content and username.
      parameters:
        - $ref: '#/components/parameters/PostId'
        - $ref: '#/components/parameters/CommentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdateRequest'
      responses:
        '200':
          description: Comment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a comment
      description: Delete a comment by ID for a post.
      parameters:
        - $ref: '#/components/parameters/PostId'
        - $ref: '#/components/parameters/CommentId'
      responses:
        '204':
          description: Comment deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /posts/{postId}/likes:
    post:
      summary: Like a post
      description: Like a post by providing a username.
      parameters:
        - $ref: '#/components/parameters/PostId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikeRequest'
      responses:
        '201':
          description: Post liked
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Unlike a post
      description: Remove a like from a post by the current user.
      parameters:
        - $ref: '#/components/parameters/PostId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikeRequest'
      responses:
        '204':
          description: Like removed
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  parameters:
    PostId:
      name: postId
      in: path
      required: true
      description: The ID of the post
      schema:
        type: string
    CommentId:
      name: commentId
      in: path
      required: true
      description: The ID of the comment
      schema:
        type: string
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Post:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        likes:
          type: integer
          description: Number of likes
      required:
        - id
        - username
        - content
        - createdAt
        - updatedAt
        - likes
    PostCreateRequest:
      type: object
      properties:
        username:
          type: string
        content:
          type: string
      required:
        - username
        - content
    PostUpdateRequest:
      type: object
      properties:
        username:
          type: string
        content:
          type: string
      required:
        - username
        - content
    Comment:
      type: object
      properties:
        id:
          type: string
        postId:
          type: string
        username:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - postId
        - username
        - content
        - createdAt
        - updatedAt
    CommentCreateRequest:
      type: object
      properties:
        username:
          type: string
        content:
          type: string
      required:
        - username
        - content
    CommentUpdateRequest:
      type: object
      properties:
        username:
          type: string
        content:
          type: string
      required:
        - username
        - content
    LikeRequest:
      type: object
      properties:
        username:
          type: string
      required:
        - username
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
      required:
        - message
        - code
